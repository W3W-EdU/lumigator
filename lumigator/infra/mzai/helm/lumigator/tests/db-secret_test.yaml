suite: db secret
templates:
  - db-secret.yaml
  - deployment.yaml
tests:
  - it: should create secret when a postgres password is supplied
    template: db-secret.yaml
    set:
      postgresPassword: blah
      postgresPasswordSecretKey: pg-pass
    release:
      name: blah
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: blah-lumigator-postgresql
      - equal:
          path: data.pg-pass
          decodeBase64: true
          value: blah
  - it: should error when an existing secret and password is supplied together
    template: db-secret.yaml
    set:
      postgresPassword: blah
      existingPostgresPasswordSecretName: biff
    asserts:
      - failedTemplate:
          errorMessage: "An existing postgres secret and postgres password cannot be provided at the same time"
  - it: should specify the secret in the deployment
    template: deployment.yaml
    set:
      postgresPasswordSecretKey: pg-pass
      existingPostgresPasswordSecretName: my-secret
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "POSTGRES_PASSWORD")].valueFrom.secretKeyRef.name
          value: my-secret # RELEASE-NAME-lumigator-postgresql
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "POSTGRES_PASSWORD")].valueFrom.secretKeyRef.key
          value: pg-pass
