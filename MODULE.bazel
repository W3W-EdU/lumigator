###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
module(
    name = "mzai_platform",
    repo_name = "mzai_platform",
)

# Bazel dependencies
bazel_dep(name = "aspect_bazel_lib", version = "2.7.1")
bazel_dep(name = "aspect_rules_py", version = "0.4.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "container_structure_test", version = "1.15.0")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_oci", version = "1.7.5")
bazel_dep(name = "rules_helm", version = "0.3.2")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.31.0")
bazel_dep(name = "gazelle", version = "0.31.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_python", version = "0.31.0")

# Use http_archive for loading old-style WORKSPACE repositories
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# The following stanze returns a proxy object representing a module extension;
# its methods can be invoked to create module extension tags.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.10",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.10",
    requirements_linux = "//platform/3rdparty/python:requirements_lock.linux",
    requirements_lock = "//platform/3rdparty/python:requirements_lock.txt",
)
use_repo(pip, "pypi")
