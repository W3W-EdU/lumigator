#!/bin/bash

# ARG_OPTIONAL_BOOLEAN([clean],[],[remove existing cluster])
# ARG_OPTIONAL_BOOLEAN([create-cluster],[],[creates the docker registry and cluster])
# ARG_OPTIONAL_SINGLE([push-image],[],[push an image to the reg ])
# ARG_OPTIONAL_SINGLE([apply-dir],[],[dir to apply content from])
# ARG_OPTIONAL_SINGLE([port-forward],[],[str of service and port to forward from the cluster, e.g., "service/<name> 80:8080"])

# ARG_HELP([The general script's help msg])


# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

KINDKUBECONFIG="$HOME/.kube/kind-config"

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_clean="off"
_arg_create_cluster="off"
_arg_push_image=
_arg_apply_dir=
_arg_port_forward=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [--(no-)clean] [--(no-)create-cluster] [--push-image <arg>] [--apply-dir <arg>] [--port-forward <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "--clean, --no-clean: remove existing cluster (off by default)"
	printf '\t%s\n' "--create-cluster, --no-create-cluster: creates the docker registry and cluster (off by default)"
	printf '\t%s\n' "--push-image: push an image to the reg  (no default)"
	printf '\t%s\n' "--apply-dir: dir to apply content from (no default)"
	printf '\t%s\n' "--port-forward: str of port to forward from the cluster (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-clean|--clean)
				_arg_clean="on"
				test "${1:0:5}" = "--no-" && _arg_clean="off"
				;;
			--no-create-cluster|--create-cluster)
				_arg_create_cluster="on"
				test "${1:0:5}" = "--no-" && _arg_create_cluster="off"
				;;
			--push-image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_push_image="$2"
				shift
				;;
			--push-image=*)
				_arg_push_image="${_key##--push-image=}"
				;;
			--apply-dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_apply_dir="$2"
				shift
				;;
			--apply-dir=*)
				_arg_apply_dir="${_key##--apply-dir=}"
				;;
			--port-forward)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port_forward="$2"
				shift
				;;
			--port-forward=*)
				_arg_port_forward="${_key##--port-forward=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash




create_registry_and_cluster() {
  # 1. Create registry container unless it already exists
  unset "$KUBECONFIG"
  reg_name='kind-registry'
  reg_port='5001'
  if [ "$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)" != 'true' ]; then
    docker run \
      -d --restart=always -p "127.0.0.1:${reg_port}:5000" --network bridge --name "${reg_name}" \
      registry:2
  fi

cat <<EOF | kind create cluster --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  # WARNING: It is _strongly_ recommended that you keep this the default
  # (127.0.0.1) for security reasons. However it is possible to change this.
  apiServerAddress: "127.0.0.1"
  # By default the API server listens on a random open port.
  # You may choose a specific port but probably don't need to in most cases.
  # Using a random port makes it easier to spin up multiple clusters.
  apiServerPort: 6443
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry]
    config_path = "/etc/containerd/certs.d"
EOF



  # 3. Add the registry config to the nodes
  #
  # This is necessary because localhost resolves to loopback addresses that are
  # network-namespace local.
  # In other words: localhost in the container is not localhost on the host.
  #
  # We want a consistent name that works from both ends, so we tell containerd to
  # alias localhost:${reg_port} to the registry container when pulling images
  REGISTRY_DIR="/etc/containerd/certs.d/localhost:${reg_port}"
  for node in $(kind get nodes); do
    docker exec "${node}" mkdir -p "${REGISTRY_DIR}"
cat <<EOF | docker exec -i "${node}" cp /dev/stdin "${REGISTRY_DIR}/hosts.toml"
[host."http://${reg_name}:5000"]
EOF
  done



  # 4. Connect the registry to the cluster network if not already connected
  # This allows kind to bootstrap the network but ensures they're on the same network
  if [ "$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' "${reg_name}")" = 'null' ]; then
    docker network connect "kind" "${reg_name}"
  fi

  # 5. Document the local registry
  # https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF
if [[ ! -f $KINDKUBECONFIG ]]; then
  kind get kubeconfig > "$KINDKUBECONFIG"
fi
}

### BODY

brew info "kind" &> /dev/null || brew install "kind" || die

if [[ "$_arg_clean" == "on"  ]]; then
  kind delete cluster
fi

if [[ "$_arg_create_cluster" == "on"  ]]; then
  echo "creating cluster"
  create_registry_and_cluster
fi

if [[ -n "$_arg_apply_dir"  ]]; then
  echo "applying dir"
  kubectl apply -f "$_arg_apply_dir"
fi

if [[ -n "$_arg_port_forward"  ]]; then
  if [ ! "$_arg_port_forward" == "" ]; then
    echo "forwarding port $_arg_port_forward"
    kubectl port-forward "$_arg_port_forward"
  fi
fi

if [[ -n "$_arg_push_image" ]]; then
  kind load docker-image "$_arg_push_image"
fi

# ] <-- needed because of Argbash
